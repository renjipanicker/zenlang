#include "zenlang.hpp"
#include "base/base.hpp"
#include "base/ast.hpp"

void z::Ast::TypedefDecl::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::TypedefDefn::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::TemplateDecl::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::TemplateDefn::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::EnumDecl::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::EnumDefn::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::StructDecl::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::RootStructDefn::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::ChildStructDefn::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::PropertyDeclRW::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::PropertyDeclRO::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::RoutineDecl::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::RoutineDefn::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::RootFunctionDecl::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::ChildFunctionDecl::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::RootFunctionDefn::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::ChildFunctionDefn::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::FunctionRetn::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::RootInterfaceDefn::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::EventDecl::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::Namespace::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::Root::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}

void z::Ast::ConditionalExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::BooleanAndExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::BooleanOrExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::BooleanEqualExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::BooleanNotEqualExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::BooleanLessThanExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::BooleanGreaterThanExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::BooleanLessThanOrEqualExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::BooleanGreaterThanOrEqualExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::BooleanHasExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::BinaryAssignEqualExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::BinaryPlusEqualExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::BinaryMinusEqualExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::BinaryTimesEqualExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::BinaryDivideEqualExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::BinaryModEqualExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::BinaryBitwiseAndEqualExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::BinaryBitwiseOrEqualExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::BinaryBitwiseXorEqualExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::BinaryShiftLeftEqualExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::BinaryShiftRightEqualExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::BinaryPlusExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::BinaryMinusExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::BinaryTimesExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::BinaryDivideExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::BinaryModExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::BinaryBitwiseAndExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::BinaryBitwiseOrExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::BinaryBitwiseXorExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::BinaryShiftLeftExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::BinaryShiftRightExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::PostfixIncExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::PostfixDecExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::PrefixNotExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::PrefixPlusExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::PrefixMinusExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::PrefixIncExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::PrefixDecExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::PrefixBitwiseNotExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::SetIndexExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::ListExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::DictExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::FormatExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::RunExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::RoutineCallExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::FunctorCallExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::OrderedExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::IndexExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::SpliceExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::SizeofTypeExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::SizeofExprExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::TypeofTypeExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::TypeofExprExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::StaticTypecastExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::DynamicTypecastExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::PointerInstanceExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::ValueInstanceExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::MapDataInstanceExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::DeRefInstanceExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::VariableRefExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::MemberVariableExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::MemberPropertyExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::EnumMemberExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::StructMemberExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::StructInstanceExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::FunctionInstanceExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::AnonymousFunctionExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::ConstantNullExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::ConstantFloatExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::ConstantDoubleExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::ConstantBooleanExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::ConstantStringExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::ConstantCharExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}

void z::Ast::ConstantLongExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::ConstantIntExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::ConstantShortExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::ConstantByteExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}

void z::Ast::ConstantUnLongExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::ConstantUnIntExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::ConstantUnShortExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::ConstantUnByteExpr::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}

void z::Ast::ImportStatement::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::EnterNamespaceStatement::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::LeaveNamespaceStatement::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::UserDefinedTypeSpecStatement::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::StructMemberVariableStatement::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::StructInitStatement::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::EmptyStatement::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::AutoStatement::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::ExprStatement::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::PrintStatement::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::IfStatement::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::IfElseStatement::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::WhileStatement::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::DoWhileStatement::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::ForExprStatement::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::ForInitStatement::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::ForeachStringStatement::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::ForeachListStatement::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::ForeachDictStatement::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::CaseExprStatement::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::CaseDefaultStatement::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::SwitchValueStatement::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::SwitchExprStatement::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::BreakStatement::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::ContinueStatement::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::SkipStatement::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::AddEventHandlerStatement::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::RoutineReturnStatement::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::FunctionReturnStatement::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::RaiseStatement::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::ExitStatement::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::CompoundStatement::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}

void z::Ast::RoutineBody::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}
void z::Ast::FunctionBody::visit(Visitor& visitor) const {visitor.visit(z::ref(this));}

