import core::Socket;
namespace FastCGI;

enum MessageType {
    TYPE_BEGIN_REQUEST     =  1;
    TYPE_ABORT_REQUEST     =  2;
    TYPE_END_REQUEST       =  3;
    TYPE_PARAMS            =  4;
    TYPE_STDIN             =  5;
    TYPE_STDOUT            =  6;
    TYPE_STDERR            =  7;
    TYPE_DATA              =  8;
    TYPE_GET_VALUES        =  9;
    TYPE_GET_VALUES_RESULT = 10;
    TYPE_UNKNOWN           = 11;
};

enum Role {
    NONE       = 0;
    RESPONDER  = 1;
    AUTHORIZER = 2;
    FILTER     = 3;
};

enum Flags {
    NONE            = 0;
    FLAG_KEEP_CONN  = 1;
};

public enum ProtocolStatus {
    REQUEST_COMPLETE = 0;
    CANT_MPX_CONN    = 1;
    OVERLOADED       = 2;
    UNKNOWN_ROLE     = 3;
};

struct Header {
    ubyte hVersion = 1uy;
    ubyte hType;
    ubyte hRequestIdB1;
    ubyte hRequestIdB0;
    ubyte hContentLengthB1;
    ubyte hContentLengthB0;
    ubyte hPaddingLength;
    ubyte hReserved;
};

struct BeginRequest : Header {
    ubyte roleB1;
    ubyte roleB0;
    ubyte flags;
    ubyte reserved1;
    ubyte reserved2;
    ubyte reserved3;
    ubyte reserved4;
    ubyte reserved5;
};

struct EndRequest : Header {
    ubyte appStatusB3;
    ubyte appStatusB2;
    ubyte appStatusB1;
    ubyte appStatusB0;
    ubyte protocolStatus;
    ubyte reserved1;
    ubyte reserved2;
    ubyte reserved3;
};

public struct Request {
    auto rid = 0u;
    dict<string, string> paramList;
    auto input = "";
};

struct RequestData : Request {
    auto role = Role.NONE;
    auto keepAlive = false;
};

typedef RequestMap dict<uint, RequestData>;

public event(const socket& s) => function void OnRequest(const socket& cs, const Request& r);

private routine void OnRequestReceived(const socket& s, const socket& cs, const Request& r) {
    raise OnRequest(s: cs, r);
}

routine Header CreateHeader(const MessageType& t, const uint& mid, const uint& len) {
    auto h = Header {
        hType            : (ubyte)t;
        hRequestIdB1     : (ubyte)(mid >> 8);
        hRequestIdB0     : (ubyte)(mid & 0xff);
        hContentLengthB1 : (ubyte)(len >> 8);
        hContentLengthB0 : (ubyte)(len & 0xff);
    };
    return h;
}

routine EndRequest CreateEndRequest(const MessageType& t, const uint& mid, const uint& appStatus, const ProtocolStatus& protStatus) {
    auto lens = sizeof(EndRequest) - sizeof(Header);
    uint len = (uint)lens;
    auto h = EndRequest {
        hType            : (ubyte)t;
        hRequestIdB1     : (ubyte)(mid >> 8);
        hRequestIdB0     : (ubyte)(mid & 0xff);
        hContentLengthB1 : (ubyte)(len >> 8);
        hContentLengthB0 : (ubyte)(len & 0xff);
        appStatusB3      : (ubyte)((appStatus >> 24) & 0xff);
        appStatusB2      : (ubyte)((appStatus >> 16) & 0xff);
        appStatusB1      : (ubyte)((appStatus >>  8) & 0xff);
        appStatusB0      : (ubyte)((appStatus >>  0) & 0xff);
        protocolStatus   : (ubyte)(protStatus);
    };
    return h;
}

routine size processRequest(const socket& s, const socket& cs, const data& bfr, RequestMap& requestMap) {
    auto h = map<Header>(bfr, 0);
    if(h.hVersion != 1) {
        print "Cannot handle version %{@v}" @ {@v: h.hVersion};
        return 0;
    }

    auto rid = (uint)((h.hRequestIdB1 << 8) + h.hRequestIdB0);
    auto len = (uint)((h.hContentLengthB1 << 8) + h.hContentLengthB0);

    if( length(bfr) < (sizeof(Header) + len + h.hPaddingLength) ) {
        print "Insufficient data: bfr:%{@b}, hdr: %{@h}, len: %{@l}, pad: @p" @ {@b: length(bfr), @h: sizeof(Header), @l: len, @p:h.hPaddingLength };
        return 0;
    }

    switch(h.hType) {
        case MessageType.TYPE_BEGIN_REQUEST: {
            if(requestMap has rid) {
                print "Received duplicate request ID %{@v}" @ {@v: rid};
                return 0;
            }

            auto br = map<BeginRequest>(bfr, 0);
            auto role = (Role)((br.roleB1 << 8) + br.roleB0);
            auto kc = ((br.flags & (int)Flags.FLAG_KEEP_CONN) == (int)Flags.FLAG_KEEP_CONN);
            requestMap[rid] = RequestData{rid:rid; role:role; keepAlive:kc;};
            break;
        }

        case MessageType.TYPE_ABORT_REQUEST: {
            if(!(requestMap has rid)) {
                print "Unknown request ID %{@v}" @ {@v: rid};
                return 0;
            }
            remove(requestMap, rid);
            break;
        }

        case MessageType.TYPE_END_REQUEST: {
            if(!(requestMap has rid)) {
                print "Unknown request ID %{@v}" @ {@v: rid};
                return 0;
            }
            remove(requestMap, rid);
            break;
        }

        case MessageType.TYPE_PARAMS: {
            if(!(requestMap has rid)) {
                print "Unknown request ID %{@v}" @ {@v: rid};
                return 0;
            }

            if(len == 0) {
                // end of params
                break;
            }

            auto req = requestMap[rid];

            auto name_len = 0u;
            auto data_len = 0u;
            size i = sizeof(Header);
            while(i < (sizeof(Header) + len)) {
                if((bfr[i] >> 7) == 0) {
                    name_len = bfr[i];
                    i++;
                } else {
                    name_len = ((bfr[i] & 0x7F) << 24) + (bfr[i+1] << 16) + (bfr[i+2] << 8) + bfr[i+3];
                    i += 4;
                }

                if((bfr[i] >> 7) == 0) {
                    data_len = bfr[i];
                    i++;
                } else {
                    data_len = ((bfr[i] & 0x7F) << 24) + (bfr[i+1] << 16) + (bfr[i+2] << 8) + bfr[i+3];
                    i += 4;
                }

                if((i + name_len + data_len) > (sizeof(Header) + len)) {
                    print "Malformed request ID %{@v}" @ {@v: rid};
                    return 0;
                }

                auto key = map<string>(bfr, i, name_len);
                i += name_len;

                auto val = map<string>(bfr, i, data_len);
                i += data_len;

                req.paramList[key] = val;
            }
            break;
        }
        case MessageType.TYPE_STDIN: {
            if(!(requestMap has rid)) {
                print "Unknown request ID %{@v}" @ {@v: rid};
                return 0;
            }

            auto req = requestMap[rid];

            if(len == 0) {
                // end of stdin
                OnRequestReceived(s, cs, req);
            }

            /// \todo: store stdin into req
            break;
        }
    }

    return sizeof(Header) + len + h.hPaddingLength;
}

/// \brief Start the FastCGI server on specified port.
public function socket Create(const int& port) {
    auto s = Socket::InitServer(port);
    Socket::OnConnect(s) => {
        print "onconnect";
        Socket::OnRecv(cs) => [; data bfr, RequestMap requestMap] {
            print "on recv";
            bfr += d;
            while( length(bfr) >= sizeof(Header) ) {
                auto l = processRequest(s, cs, bfr, requestMap);
                if(l == 0) {
                    clear(bfr);
                    break;
                }
                bfr = bfr[ l : 0];
            }
        };
    };
    return(s);
}

public function void SendOutput(const Request& req, const socket& s, const string& o) {
    auto h = CreateHeader(MessageType.TYPE_STDOUT, req.rid, length(o));
    auto d = raw(h);
    Socket::SendData(s, d);
    Socket::SendString(s, o);
}

public function void SendEndRequest(const Request& req, const socket& s, const uint& appStatus, const ProtocolStatus& protStatus) {
    SendOutput(req, s, "");
    auto h = CreateEndRequest(MessageType.TYPE_END_REQUEST, req.rid, appStatus, protStatus);
    auto d = raw(h);
    Socket::SendData(s, d);
    Socket::Close(s);
}

public function void Start(const socket& s) {
    Socket::StartServer(s);
    return();
}
