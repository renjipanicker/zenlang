include gui::WindowImpl native;
include MenuHandle public;
namespace Window;

public enum Style {
    Normal;
    Dialog;
};

public struct Position {
    x = -1;
    y = -1;
    w = -1;
    h = -1;
};

public struct Handle {
    struct Impl native;
    ptr<Impl> wdata;
    property dict<string, Window::Handle> childWin get;
    property dict<string, Menu::Handle> childMenu get;
};

public typedef ChildList dict<string,Handle>;

public struct Anchor {
    Handle window;
    string target;
    margin = 0;
};

public struct Definition {
    title = "";
    position = Window::Position{};
    style = Style.Normal;
    visible = false;
    Anchor left;
    Anchor right;
    Anchor top;
    Anchor bottom;
    dict<string, pointer<Definition> > childList;
};

public routine Position getWindowPosition(const Handle& window) native;
public routine Position getChildPosition(const Handle& window) native;
public routine ChildList& childList(const Handle& window) native;

public function ()Delete(const Handle& window) native;
public function ()SetTitle(const Handle& window, const string& title) native;
public function ()Show(const Handle& window) native;
public function ()Hide(const Handle& window) native;
public function ()Move(const Handle& window, const Position& position) native;
public function ()Size(const Handle& window, const int& w, const int& h) native;

public event(const Handle& window) => function ()OnResize() native;
public event(const Handle& window) => function ()OnClose() native;
