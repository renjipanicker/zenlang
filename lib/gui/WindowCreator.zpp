include gui::WindowImpl native;
include Window public;
include Mainframe;
include Button;
include TextEdit;
include Systray;

namespace WindowCreator;

routine const Window::Handle& processWindow(const Window::Handle& win, const Window::Definition& defn);

routine void createWindow(const Window::Handle& parentWin, const string& name, const pointer<Window::Definition>& defn) {
    switch {
        case (typeof(defn) == typeof(Button::Definition)): {
            auto w = Button::Create(parentWin, <Button::Definition>defn);
            Window::childList(parentWin)[name] = w.window;
            processWindow(w.window, *defn);
        }
        case (typeof(defn) == typeof(TextEdit::Definition)): {
            auto w = TextEdit::Create(parentWin, <TextEdit::Definition>defn);
            Window::childList(parentWin)[name] = w.window;
            processWindow(w.window, *defn);
        }
        case (typeof(defn) == typeof(Systray::Definition)): {
            auto st = Systray::Create(parentWin, <Systray::Definition>defn);
            unused(st);
        }
    }
}

routine const Window::Handle& processWindow(const Window::Handle& win, const Window::Definition& defn) {
    foreach(n,d in defn.childList) {
        createWindow(win, n, d);
    }
    return win;
}

public function (Window::Handle window)Create(const MainFrame::Definition& defn) {
    auto w = MainFrame::Create(defn);
    processWindow(w.window, defn);
    return (w.window);
}
