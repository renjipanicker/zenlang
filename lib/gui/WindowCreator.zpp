include gui::WindowImpl native;
include Window;
include Mainframe;
include Button;
include TextEdit;

namespace WindowCreator;

public function (Window::Instance window)Create(const Window::Instance& parent, const pointer<Window::Definition>& def) {
    switch {
        case (typeof(def) == typeof(MainFrame::Definition)): {
            auto d = <MainFrame::Definition>def;
            auto w = MainFrame::Create(d);
            foreach(n,c in d.child) {
                auto cw = WindowCreator::Create(w.window, c);
                unused(cw, n);
                //Window::addChild(w, n, cw);
                w.window.child[n] = &cw.window;
            }
            return (w.window);
        }
        case (typeof(def) == typeof(Button::Definition)): {
            auto d = <Button::Definition>def;
            auto w = Button::Create(parent, d);
            return (w.window);
        }
        case (typeof(def) == typeof(TextEdit::Definition)): {
            auto d = <TextEdit::Definition>def;
            auto w = TextEdit::Create(parent, d);
            return (w.window);
        }
    }

    return (Window::Instance());
}
