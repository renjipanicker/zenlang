include gui::WindowImpl native;
include gui::Window public;
include gui::Mainframe public;
include gui::Button;
include gui::TextEdit;
include gui::Systray;
include gui::Menu;
include gui::MenuItem;

namespace WindowCreator;

routine const Window::Handle& processWindow(Window::Handle& win, const Window::Definition& defn);

routine void createMenuItem(Menu::Handle& pmenu, const pointer<Widget::Definition>& defn) {
    auto w = MenuItem::Create(pmenu, defn);
    pmenu.child[(*defn).name] = &(w);
}

routine Menu::Handle createMenu(Window::Handle& pwin, const pointer<Widget::Definition>& defn) {
    auto w = Menu::Create(pwin, defn);
    pwin.child[(*defn).name] = &(w);
    foreach(d in (*defn).childList) {
        createMenuItem(w, d);
    }
    return w;
}

routine void createWindow(Window::Handle& pwin, const pointer<Widget::Definition>& defn) {
    switch {
        case (typeof(defn) == typeof(Button::Definition)): {
            auto w = Button::Create(pwin, defn);
            pwin.child[(*defn).name] = &(w);
            processWindow(w, defn);
        }
        case (typeof(defn) == typeof(TextEdit::Definition)): {
            auto w = TextEdit::Create(pwin, defn);
            pwin.child[(*defn).name] = &(w);
            processWindow(w, defn);
        }
        case (typeof(defn) == typeof(Systray::Definition)): {
            auto w = Systray::Create(pwin, defn);
            pwin.child[(*defn).name] = &(w);
        }
        case (typeof(defn) == typeof(Menu::Definition)): {
            createMenu(pwin, defn);
        }
    }
}

routine const Window::Handle& processWindow(Window::Handle& win, const Window::Definition& defn) {
    foreach(d in defn.childList) {
        createWindow(win, d);
    }
    return win;
}

public function Window::Handle Create(const MainFrame::Definition& defn) {
    auto w = MainFrame::Create(defn);
    processWindow(w.window, defn);
    return (w.window);
}
