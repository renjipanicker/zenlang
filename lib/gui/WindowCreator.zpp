include gui::WindowImpl native;
include Window public;
include Mainframe;
include Button;
include TextEdit;

namespace WindowCreator;

/*
private routine Window::Handle createWindow(const Window::Handle& parentWin, const pointer<Window::Definition>& defn);

private routine void processWindow(const Window::Handle& parentWin, Window::Definition& defn) {
    foreach(n,c in defn.child) {
        auto cw = createWindow(parentWin, c);
        Window::childList(parentWin)[n] = cw;
    }
}
*/

private routine Window::Handle createWindow(const Window::Handle& parentWin, const pointer<Window::Definition>& defn) {
    switch {
        case (typeof(defn) == typeof(MainFrame::Definition)): {
            auto d = <MainFrame::Definition>defn;
            auto w = MainFrame::Create(d);
            foreach(n,c in d.childList) {
                auto cw = createWindow(w.window, c);
                Window::childList(w.window)[n] = cw;
            }
            return w.window;
        }
        case (typeof(defn) == typeof(Button::Definition)): {
            auto d = <Button::Definition>defn;
            auto w = Button::Create(parentWin, d);
            return w.window;
        }
        case (typeof(defn) == typeof(TextEdit::Definition)): {
            auto d = <TextEdit::Definition>defn;
            auto w = TextEdit::Create(parentWin, d);
            return w.window;
        }
    }

    return Window::Handle();
}

public function (Window::Handle window)Create(const Window::Handle& parentWin, const pointer<Window::Definition>& defn) {
    switch {
        case (typeof(defn) == typeof(MainFrame::Definition)): {
            auto d = <MainFrame::Definition>defn;
            auto w = MainFrame::Create(d);
            foreach(n,c in d.childList) {
                auto cw = WindowCreator::Create(w.window, c);
                Window::childList(w.window)[n] = cw.window;
            }
            return (w.window);
        }
        case (typeof(defn) == typeof(Button::Definition)): {
            auto d = <Button::Definition>defn;
            auto w = Button::Create(parentWin, d);
            return (w.window);
        }
        case (typeof(defn) == typeof(TextEdit::Definition)): {
            auto d = <TextEdit::Definition>defn;
            auto w = TextEdit::Create(parentWin, d);
            return (w.window);
        }
    }

    return (Window::Handle());
}
