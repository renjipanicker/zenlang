namespace TestBasic;

public routine int testNative(const string& s) native;

public routine int testRoutine(const int& x) {
    return 12345;
}

public function (int ri, string rs)testFunction(const int& x) {
    return (67890, "testfn");
}

public test testBasicExpr {
    auto i = 0;
    auto s = "xx";
    auto e = (1 + 2) * 3;
    auto n = (1 > 2) ? 1 : 2;
    auto t = "yy %{x}\n" @ {"n":n};
    auto l = [1,2,3];
    auto d = ["a":1,"b":2,"c":3];
    auto r = testRoutine(123);
    auto f = testFunction(456);

    assert(i == 0, s == "xx", e == 9, n == 2);
    unused(t, l, d, r, f);

    return (1);
}

public enum MyEnum {
    C1;
    C2;
};

public struct MyStruct {
    i = 0;
};

public function (int r)testAdvancedExpr(const int& x, const MyStruct& myStruct, const MyEnum& myEnum) {
    auto v = x;
    auto m = myStruct.i;
    auto n = myEnum;
    unused(v, m, n);
    return (67890);
}

public test testFunction001 {
    auto myStruct = MyStruct{i:0;};
    auto e = MyEnum.C1;
    auto c = testAdvancedExpr(321, myStruct, e);
    unused(c);
    return (1);
}

public test testInnerRootFunction {
    function (int i)innerFunction(int j) {
        return (2);
    }
    auto f = innerFunction(2);
    auto o = innerFunction[];
    auto r = o(2);
    unused(f, o, r);
    return (1);
}

public test testInnerChildFunction {
    testFunction innerFunction {
        return (2, "aa");
    }
    auto f = innerFunction(2);
    auto o = innerFunction[];
    auto r = o(2);
    unused(f, o, r);
    return (1);
}

public test testInnerChildFunctionClosure {
    auto i = 0;
    testFunction innerFunction {
        return (i, "aa");
    }
    auto f = innerFunction(2);
    auto o = innerFunction[];
    auto r = o(2);
    unused(f, o, r);
    return (1);
}

public test testAnonymousFunction {
    auto a = testFunction {
        return (2, "aa");
    };
    auto r = a(2);
    unused(r);
    return (1);
}

public test testAnonymousFunctionWithClosure {
    auto i = 0;
    auto a = testFunction {
        return (i, "aa");
    };
    auto r = a(2);
    unused(r);
    return (1);
}

public test testIfStatement {
    auto i = 0;
    auto j = 0;
    if(i > 2) {
        j = 3;
    }
    unused(j);
    return (1);
}

public test testIfElseStatement {
    auto i = 0;
    auto j = 0;
    if(i > 2) {
        j = 3;
    } else {
        j = 5;
    }
    unused(j);
    return (1);
}

public test testWhileStatement {
    auto i = 0;
    while(i < 2) {
        i++;
    }
    return (1);
}

public test testDoWhileStatement {
    auto i = 0;
    do {
        i++;
    } while(i < 2);
    return (1);
}

public test testForExprStatement {
    auto j = 0;
    auto i = 0;
    for(i = 0; i < 10; ++i) {
        j += i;
    }
    return (1);
}

public test testForInitStatement {
    auto j = 0;
    for(auto i = 0; i < 10; ++i) {
        j += i;
    }
    return (1);
}

public test testForeachListStatement {
    auto j = 0;
    auto l = [1,2,3];
    foreach(i in l) {
        j += i;
    }
    return (1);
}

public test testForeachDictStatement {
    auto j = 0;
    auto l = ['a':1, 'b':2,'c':3];
    foreach(k,v in l) {
        unused(k);
        j += v;
        continue;
    }
    return (1);
}

public test testSwitchValueStatement {
    auto j = 0;
    switch(j) {
        case 1: {
            break;
        }
        case 2: {
            break;
        }
        default: {
            break;
        }
    }
    return (1);
}

public test testSwitchExprStatement {
    auto j = 0;
    switch {
        case j == 1: {
        }
        case j == 2: {
        }
        default: {
        }
    }
    return (1);
}

public function (int ri, string rs)runFunctionTest(const int& x) {
    print "runFunctionTest %{x}\n" @ {"x":x};
    return (67890, "run");
}

public test testRunExpr {
    auto f = run runFunctionTest(456);
    unused(f);
    return (1);
}

public main MyMain {
    auto f = run runFunctionTest(908);
    unused(f);
    return (0);
}
